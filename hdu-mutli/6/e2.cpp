#include <iostream>
#include <cstdio>
#include <cassert>
#include <cstring>
#include <cmath>
#include <functional>
#include <algorithm>
#include <utility>
#include <vector>
#include <string>
#include <map>
#include <set>
#define ms(a,b) memset(a,b,sizeof(a))
using namespace std;
using ll = long long;
using PII = pair<int,int>;
const int mod = 998244353;
const int inf = 1 << 30;
const int maxn = 200000 + 5;

int a[] = {
  0,
  1, 1, 4, 5, 1, 4, 1, 9, 1, 9,
  1, 1, 4, 5, 1, 4, 1, 9, 1, 9,
};

int vis[25][25];
bool dp[25][25][5005];
void solve(int l, int r) {
  if (vis[l][r]) return ;
  vis[l][r] = true;
  int tot = 0;
  for (int i = l; i <= r; i++) {
    tot = tot * 10 + a[i];
    if (tot > 5000) {
      tot = -1; break;
    }
  }
  if (tot != -1) dp[l][r][tot] = true;
  for (int i = l; i <= r; i++) {
    solve(l, i);
    solve(i + 1, r);
    for (int s = 1; s <= 5000; s++) {
      for (int t = 1; t <= s && !dp[l][r][s]; t++) {
        if (dp[l][i][t] && dp[i + 1][r][s - t]) dp[l][r][s] = true;
        if (s % t == 0 && dp[l][i][t] && dp[i + 1][r][s / t]) dp[l][r][s] = true;
      }
    }
  }
}

int ans[5005] = {0,1,2,-1,3,3,3,-1,3,4,4,2,5,4,3,3,6,6,4,4,4,4,4,5,5,4,4,5,6,6,4,4,5,6,6,5,5,6,6,6,4,5,5,7,3,4,4,4,5,4,5,6,6,6,6,5,4,5,6,5,6,6,7,6,6,5,5,7,6,6,4,4,5,7,6,4,5,6,6,6,6,6,6,7,5,5,6,6,6,6,4,5,5,7,6,5,6,6,6,4,5,6,6,6,6,6,6,6,6,7,5,6,7,6,3,7,7,7,6,4,5,6,7,6,6,6,6,6,6,7,6,7,7,6,6,6,7,6,6,6,6,6,7,6,6,4,4,5,6,6,6,6,6,7,6,6,7,8,7,6,6,7,7,7,6,5,7,7,6,6,7,7,7,8,7,7,8,8,8,8,6,6,6,7,6,6,6,7,6,6,7,6,6,7,7,6,6,7,8,7,6,7,7,8,5,5,5,8,6,6,6,7,6,7,7,5,7,8,6,6,4,5,6,7,6,6,6,6,6,7,6,5,7,8,6,6,6,7,8,8,7,7,8,8,8,6,7,7,6,7,7,7,6,6,7,5,5,8,8,6,6,6,7,7,5,7,6,6,6,7,7,7,7,8,8,6,6,7,8,8,6,6,6,7,6,6,7,7,6,7,7,6,7,8,6,6,7,7,8,7,6,7,7,8,6,7,5,8,6,7,6,7,8,8,8,7,7,8,6,6,7,8,7,8,7,7,7,8,8,8,6,7,8,8,8,8,6,6,7,8,6,7,8,8,8,8,8,7,8,8,6,6,7,9,8,6,7,8,8,8,6,7,7,8,6,7,8,8,6,7,7,7,7,8,6,6,7,8,7,7,6,7,8,8,8,7,8,8,8,7,7,8,8,8,8,8,6,7,8,8,6,7,8,8,8,8,8,7,5,8,7,7,6,7,8,8,6,7,7,8,6,7,8,8,8,7,7,8,7,8,8,8,8,8,6,7,8,8,8,8,6,7,7,8,8,8,8,9,7,7,6,5,5,5,8,6,6,6,7,8,7,7,5,8,8,7,6,7,8,8,8,8,8,8,8,7,6,7,8,8,6,7,8,8,7,8,8,8,8,8,7,8,7,7,7,4,5,8,8,6,6,7,8,7,8,8,5,8,8,6,6,7,8,8,8,8,8,8,6,6,6,7,6,7,8,8,8,8,6,6,7,8,8,7,8,8,7,7,8,6,7,8,8,8,9,8,7,7,8,8,6,7,7,8,8,8,8,9,6,7,6,7,7,8,8,8,8,8,7,8,4,5,8,8,6,6,7,8,8,8,6,6,7,8,6,6,7,8,6,7,8,8,8,8,7,6,7,8,8,8,7,8,8,8,8,5,8,8,8,6,7,7,7,9,8,8,8,8,8,8,8,8,8,8,8,8,9,8,6,7,6,6,6,7,8,8,7,8,8,8,8,6,7,8,6,6,7,8,8,6,7,8,9,8,8,8,8,8,6,7,6,7,8,8,8,8,8,8,8,8,8,7,8,9,8,7,7,7,8,8,8,8,7,8,5,8,6,7,6,7,7,7,9,8,8,8,8,8,8,8,8,8,8,8,8,7,8,8,8,7,7,7,8,7,5,5,8,8,6,6,7,8,8,8,8,6,6,7,8,8,6,7,9,9,8,7,7,8,7,8,8,8,8,9,8,8,9,8,8,7,8,8,9,8,8,7,7,8,8,8,8,8,8,9,8,5,8,8,8,6,6,6,7,9,8,8,8,8,8,7,7,8,9,8,6,7,8,9,8,8,8,8,8,8,8,9,8,9,7,7,8,8,8,8,9,8,7,8,8,9,8,8,9,9,6,7,6,6,6,7,6,6,7,8,6,6,7,6,7,8,8,7,8,8,8,8,6,7,8,8,7,7,7,8,8,8,8,7,8,8,8,7,8,8,8,8,8,8,8,9,6,7,7,7,8,8,8,8,9,7,7,7,7,8,8,8,7,8,8,8,6,7,7,7,6,7,8,8,9,8,8,7,8,8,8,9,8,8,9,8,8,8,5,7,9,9,6,7,9,8,6,7,7,8,8,8,8,9,8,8,8,8,8,8,6,7,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,9,8,7,8,8,7,8,8,9,8,8,8,9,8,8,8,7,8,9,8,8,8,8,9,9,8,8,8,8,8,8,8,9,8,8,9,9,8,8,6,6,7,9,7,7,7,9,8,8,8,8,8,8,6,7,9,9,8,8,8,8,8,8,8,9,9,8,8,8,8,8,8,8,9,9,8,8,9,9,6,6,7,8,6,7,6,7,9,8,7,7,9,8,8,8,6,7,7,8,8,8,9,8,8,8,8,8,8,8,6,7,8,8,8,8,6,7,8,8,8,8,8,9,8,7,7,7,9,8,8,8,8,9,8,7,8,9,9,9,8,8,8,8,8,8,8,9,9,8,8,8,7,8,9,8,8,9,8,9,6,7,8,8,8,7,8,7,8,8,8,7,9,9,8,8,8,9,9,8,8,8,8,8,9,7,8,8,8,9,8,9,8,8,8,8,8,9,10,9,6,7,9,8,7,4,5,8,8,6,6,7,8,8,8,7,9,9,8,6,7,8,9,9,8,9,8,9,7,8,8,8,9,9,9,9,8,8,8,8,8,8,8,8,8,8,7,7,8,9,8,8,9,10,9,8,8,8,9,8,8,8,8,9,9,9,8,9,9,10,8,8,9,10,9,8,8,8,8,8,9,8,8,9,6,7,8,9,9,9,7,7,8,8,8,8,9,10,9,8,8,9,8,8,9,9,8,8,9,10,8,8,9,10,7,9,9,10,10,9,6,7,7,8,9,8,8,8,8,7,7,7,9,10,8,7,7,9,8,8,7,9,8,9,8,8,7,8,7,7,8,8,8,9,8,8,8,8,8,8,8,8,7,10,9,8,9,9,9,8,9,8,7,9,8,8,8,9,8,8,7,8,8,9,10,8,8,9,8,8,8,8,8,9,8,8,8,9,8,8,8,8,8,9,8,8,9,10,9,9,7,8,8,9,10,8,8,8,8,8,8,8,9,9,8,8,9,9,8,9,8,9,10,9,8,9,9,8,9,9,7,9,10,9,9,9,6,7,8,8,8,9,10,9,10,8,8,7,9,10,8,8,9,9,8,8,8,8,8,9,7,7,9,10,8,8,9,8,7,8,8,9,8,9,9,8,8,8,8,8,8,8,8,9,9,7,8,8,8,8,8,8,9,10,8,8,8,9,9,8,8,5,5,9,10,6,6,7,8,8,8,9,10,8,8,8,8,8,8,9,9,9,9,10,8,8,7,9,9,9,8,9,8,9,9,7,8,8,8,8,8,8,7,7,8,8,8,8,8,9,8,8,8,8,9,9,9,8,8,8,8,8,8,9,8,8,9,9,8,8,8,8,8,8,9,9,9,8,8,9,7,8,8,8,8,9,9,9,8,8,8,8,8,8,9,9,9,8,8,9,8,7,9,10,9,9,9,10,8,9,8,9,8,9,8,8,8,9,9,9,9,9,10,9,9,8,9,9,10,10,9,8,9,9,8,9,10,10,10,10,8,8,9,10,10,8,8,8,8,9,8,9,9,10,10,9,8,8,9,10,8,8,9,10,10,8,8,8,8,9,8,8,8,9,9,9,8,9,9,8,8,8,6,7,7,9,10,10,8,8,7,8,8,8,9,10,9,8,9,8,7,8,8,8,9,10,8,8,8,8,9,9,9,10,8,8,6,7,9,10,8,9,8,8,8,8,8,9,9,10,7,7,8,8,8,8,9,9,9,8,8,8,8,8,8,9,8,8,8,9,8,8,8,8,8,8,9,8,9,10,8,8,8,9,9,9,8,9,10,8,9,9,7,9,9,8,9,9,8,8,9,8,9,9,9,9,9,8,9,8,8,9,9,9,9,10,8,9,8,8,8,9,8,9,9,8,9,9,9,10,8,9,9,9,8,9,9,10,9,9,9,7,9,8,9,9,9,10,8,8,8,9,9,9,8,7,8,9,10,10,10,8,9,9,8,9,10,10,10,10,8,8,8,9,6,6,6,7,6,6,7,8,6,7,8,6,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,9,7,8,8,9,9,10,8,8,8,8,8,8,7,7,7,6,7,8,8,9,8,8,8,7,8,8,8,8,9,8,9,8,8,9,8,9,9,8,8,8,8,8,8,8,9,10,10,8,8,8,8,9,8,7,7,7,8,7,7,7,9,8,8,8,7,8,8,8,7,8,9,8,8,8,9,8,9,8,8,9,10,8,8,8,8,9,8,8,9,9,10,9,8,8,7,7,9,9,9,7,7,8,8,8,8,8,9,9,8,8,9,8,9,9,9,10,10,8,9,9,10,9,8,9,8,9,8,8,8,8,8,8,8,9,10,7,9,9,8,8,9,7,9,8,8,9,9,6,7,8,8,6,7,8,9,9,8,8,7,9,8,8,8,8,9,8,8,8,9,8,8,8,9,9,8,9,7,9,9,10,10,8,9,8,8,8,9,9,9,9,9,6,7,8,8,9,10,6,6,7,8,8,7,8,9,9,8,7,8,9,8,6,7,7,9,8,8,7,9,8,8,8,8,6,6,6,7,7,7,7,8,9,8,8,6,7,8,8,7,8,9,10,8,8,8,9,8,8,8,8,9,8,9,8,9,8,9,8,8,8,8,8,7,7,7,8,7,8,8,9,8,8,7,7,8,8,8,8,9,8,9,8,8,8,8,9,9,8,8,9,8,8,8,8,9,9,10,9,9,8,8,8,7,9,9,9,8,9,9,9,8,8,8,9,8,9,9,9,9,9,9,8,9,9,10,9,9,8,9,8,9,9,10,6,7,8,8,8,8,9,10,10,7,7,9,9,10,8,8,9,9,8,8,9,9,9,8,7,9,9,10,10,9,9,9,9,8,8,8,8,9,9,7,8,8,9,8,8,8,9,9,8,8,8,9,8,8,8,9,8,8,9,9,9,9,8,8,9,10,8,8,9,9,10,10,9,10,8,8,8,9,5,9,10,9,6,7,8,8,8,9,8,7,7,7,8,8,7,7,9,10,8,7,7,8,8,8,8,9,10,10,8,8,9,8,9,9,6,7,9,9,6,7,8,9,6,7,8,9,10,8,8,8,7,7,8,7,8,8,8,8,8,8,8,8,8,8,7,8,9,10,9,9,9,10,10,8,8,9,9,10,9,8,9,10,8,9,10,8,8,8,9,10,9,7,9,8,8,8,8,8,9,10,8,8,9,8,8,8,7,10,7,9,8,9,8,9,8,8,9,8,9,9,9,8,9,10,9,9,9,10,9,8,8,9,10,9,9,9,10,10,10,8,9,8,9,9,9,10,9,9,7,8,8,8,8,9,8,9,9,8,8,8,9,10,9,8,9,10,8,8,8,9,10,10,9,7,6,7,8,9,9,9,9,10,8,8,8,7,8,9,10,9,10,10,10,8,8,8,9,9,9,9,10,10,8,9,8,9,9,8,9,10,9,9,9,10,9,9,10,10,7,9,9,10,9,10,8,9,10,8,9,6,7,8,9,9,7,9,10,9,8,8,7,9,10,8,9,10,10,8,8,8,9,8,9,8,8,9,9,10,9,10,10,10,9,9,9,9,9,10,9,10,10,10,8,8,8,8,8,9,9,9,9,8,8,8,7,8,9,10,9,9,10,10,7,8,8,9,9,10,8,9,8,8,9,9,8,9,9,10,8,8,8,8,8,9,9,9,9,8,8,8,8,8,9,10,6,6,7,10,8,7,7,9,8,8,8,8,9,8,8,8,9,9,9,8,8,8,8,9,8,9,8,9,10,10,8,8,9,8,9,9,9,9,9,9,8,9,9,8,9,8,8,9,8,8,8,8,8,9,10,9,9,8,8,8,9,10,9,10,9,10,8,9,9,9,8,8,9,10,10,9,8,8,9,10,9,9,8,8,8,8,8,9,9,10,8,8,9,8,8,7,7,9,8,9,8,9,10,8,8,8,9,10,8,7,7,9,10,9,8,9,10,9,8,8,9,8,9,9,9,7,9,10,9,9,8,8,8,9,8,9,7,10,10,8,8,8,9,10,9,8,9,8,8,9,9,9,9,9,10,10,10,10,9,10,9,9,9,10,9,9,6,7,9,8,9,9,9,10,9,8,8,9,9,9,7,8,8,9,10,8,9,9,10,8,8,8,9,10,9,10,9,10,9,10,9,9,8,9,9,8,9,10,10,10,9,8,9,9,10,10,9,10,10,10,8,9,10,9,8,8,9,9,10,8,8,8,8,9,9,9,9,9,9,10,8,8,8,9,9,9,8,9,10,9,7,7,7,10,10,10,9,9,9,8,8,7,8,9,10,8,8,9,9,10,8,8,9,10,8,9,10,10,10,7,6,7,9,10,10,7,6,6,7,8,6,7,8,9,8,8,8,8,9,8,7,7,9,8,9,8,8,9,8,8,8,9,9,10,8,9,10,10,8,9,9,10,10,10,9,10,9,10,8,9,9,10,10,10,9,9,10,9,10,10,8,7,7,9,10,9,8,9,10,10,8,8,9,10,10,8,8,9,8,9,9,10,10,10,8,9,10,9,10,10,7,7,9,10,9,8,9,9,8,8,8,9,7,10,9,9,10,10,10,9,9,7,7,10,7,10,10,10,10,10,7,8,9,8,9,9,9,10,10,8,9,9,7,8,9,10,10,10,10,10,9,8,8,9,9,10,8,8,9,10,8,8,8,8,9,9,9,9,9,9,8,8,9,10,8,9,9,10,10,10,9,8,8,9,8,7,9,10,10,10,9,9,9,8,8,9,9,9,9,9,8,9,8,9,10,10,10,9,9,10,9,9,9,9,10,9,9,10,10,10,6,7,9,10,8,9,8,8,9,8,8,9,9,9,10,7,9,9,9,8,6,7,9,10,6,7,10,9,9,8,7,7,9,8,8,9,9,10,10,8,8,9,7,8,9,9,10,10,9,9,9,8,9,10,10,10,7,9,10,10,9,10,8,8,7,8,9,10,9,9,9,10,10,8,9,9,9,9,8,9,10,10,10,10,8,9,8,9,10,10,7,8,9,10,10,9,9,9,10,8,8,9,10,10,9,9,9,10,8,9,9,9,9,10,10,9,9,10,10,8,8,9,9,10,9,9,9,9,10,10,8,9,8,9,9,8,8,9,8,9,9,9,10,10,8,9,10,9,10,10,8,8,9,10,10,9,10,10,10,10,8,8,9,8,9,9,10,11,10,10,10,10,10,10,8,9,11,11,10,10,8,9,9,10,9,9,10,9,10,8,8,8,9,10,10,9,8,9,8,9,9,9,9,10,10,10,8,8,9,10,10,9,10,10,10,9,8,8,9,10,9,10,10,10,10,8,9,9,10,8,9,9,10,10,10,10,9,10,10,10,7,9,9,10,10,10,8,9,10,8,9,9,8,8,8,8,8,9,9,9,9,8,8,8,9,9,9,9,8,9,8,8,8,9,10,8,8,9,10,8,9,8,9,10,8,8,9,10,8,9,9,10,9,10,10,9,10,10,8,8,8,8,9,10,10,10,8,9,9,9,8,9,10,10,9,8,8,9,9,10,9,8,9,10,8,9,9,10,9,10,9,9,8,9,9,10,10,10,10,8,8,9,8,8,8,9,10,10,9,10,9,8,8,8,9,10,10,10,10,10,7,8,8,9,10,10,10,10,10,8,9,8,8,9,10,10,10,10,9,8,8,9,10,9,7,7,9,10,10,10,8,9,10,8,8,9,9,10,8,9,10,10,10,10,10,8,8,8,9,10,9,9,10,10,10,10,8,9,10,10,8,8,9,10,10,7,10,9,10,10,10,10,10,10,8,9,8,8,8,9,8,8,9,10,8,9,9,8,9,9,8,9,9,10,9,8,8,9,10,10,8,9,10,10,10,7,7,10,9,10,10,9,10,10,8,8,9,10,10,10,10,10,8,8,9,10,10,10,10,9,8,8,9,9,10,9,10,10,10,10,9,10,10,10,8,9,10,10,10,10,7,7,8,8,9,7,9,10,10,8,8,9,10,10,8,9,10,10,9,9,10,8,9,10,10,10,10,10,10,10,8,9,9,10,10,10,10,10,6,7,7,9,10,10,10,9,9,8,8,8,9,8,9,11,10,9,8,8,8,8,9,10,11,9,9,9,9,9,10,10,8,9,9,9,9,9,8,9,8,9,9,9,9,10,9,9,9,10,9,10,10,9,9,8,9,10,7,10,10,10,10,10,9,9,9,8,9,10,10,10,8,9,9,10,10,10,10,10,9,10,7,8,8,9,10,10,8,8,8,8,8,8,9,10,10,8,9,9,8,9,9,9,10,10,10,10,10,8,9,10,9,10,10,10,8,9,9,9,10,10,10,7,9,9,10,10,10,10,10,10,8,9,9,9,8,9,9,10,10,9,8,8,9,8,9,9,9,9,9,10,8,9,8,9,9,9,9,9,9,10,10,8,7,8,9,9,9,9,9,9,7,8,8,9,9,10,9,9,8,8,8,8,9,10,8,8,9,9,8,9,8,9,9,9,10,10,9,9,9,9,9,10,10,10,10,9,9,10,10,9,9,9,9,9,9,7,9,10,8,9,9,9,9,9,8,9,10,10,10,9,9,9,9,9,9,9,9,9,9,10,9,9,8,9,9,10,10,10,10,10,10,9,9,9,9,9,10,9,9,9,10,9,9,10,10,10,8,9,9,10,8,8,8,9,8,9,10,10,10,10,8,8,9,9,10,7,9,9,10,10,8,9,9,10,8,9,8,9,10,10,9,9,9,9,10,8,8,9,10,10,8,9,9,10,10,10,9,8,9,10,10,9,9,9,9,9,9,9,10,9,10,9,9,10,10,10,9,10,10,10,10,9,8,8,8,9,10,10,10,10,8,9,9,8,9,11,10,9,9,8,9,8,8,9,10,9,10,10,8,9,9,9,10,11,9,10,9,9,10,10,8,9,10,10,10,9,10,10,10,10,8,9,10,10,8,9,9,10,10,10,9,10,11,10,10,8,9,11,10,10,10,10,10,10,10,10,9,10,8,9,10,10,8,9,9,10,10,9,10,11,9,8,9,10,10,10,9,10,7,9,8,9,9,10,11,10,9,8,9,7,8,9,10,11,11,8,9,10,8,9,8,9,10,11,10,9,9,10,10,10,9,9,10,11,9,9,9,10,8,9,9,10,9,10,9,8,8,8,9,10,7,9,9,9,8,8,8,9,9,8,9,9,6,7,7,8,9,9,9,10,7,8,8,8,9,9,10,10,10,8,8,8,8,9,9,10,10,10,8,9,8,8,8,8,9,9,9,8,9,8,8,9,9,10,10,10,10,10,7,9,8,8,9,10,10,10,10,8,9,8,9,9,10,10,10,10,9,10,10,10,8,8,8,9,8,8,9,9,9,10,7,8,8,9,8,9,10,9,8,8,8,8,9,8,9,9,9,10,8,9,9,9,9,9,9,9,9,9,8,9,10,9,9,9,8,9,9,9,10,10,7,9,9,9,10,9,9,9,9,8,9,9,10,10,10,10,9,9,9,9,8,9,10,10,10,10,8,8,9,10,9,9,9,9,8,9,9,9,9,10,10,10,9,10,10,8,8,8,9,8,9,9,9,9,8,9,8,9,10,10,8,9,9,8,8,8,9,10,10,10,9,9,9,9,10,9,9,10,10,10,9,9,8,8,9,10,10,9,11,10,8,9,9,8,9,10,10,10,10,8,9,9,8,9,9,9,9,9,9,10,8,9,10,10,10,10,10,10,10,10,9,10,10,10,10,10,8,9,10,10,9,9,10,10,10,9,9,9,9,10,8,7,9,10,10,10,9,10,8,9,8,9,10,10,10,10,10,10,10,8,9,9,9,9,9,9,9,9,10,10,8,9,9,8,9,10,9,11,9,9,8,9,9,10,10,9,9,9,9,10,9,9,9,11,9,9,10,9,8,8,8,9,10,10,10,11,8,8,8,8,9,10,10,10,8,9,8,9,9,10,10,10,10,10,10,8,9,10,10,9,9,9,9,9,8,8,9,10,10,10,9,10,10,10,10,10,10,10,10,10,9,9,10,10,8,9,10,11,9,10,9,8,9,10,9,10,9,9,10,9,8,9,9,10,10,10,9,10,9,8,7,9,9,9,6,6,6,7,10,8,9,9,9,8,8,6,7,8,8,9,9,10,9,8,8,8,9,10,10,10,9,10,10,9,8,9,10,10,10,10,8,8,8,9,8,9,10,10,9,9,8,8,9,10,10,8,9,10,9,10,8,9,10,10,10,10,9,10,10,10,6,7,9,10,6,7,9,10,9,8,8,9,9,8,8,9,10,10,8,8,8,9,9,8,9,9,9,9,9,8,8,9,10,10,9,10,9,9,10,10,8,9,10,10,10,10,10,10,9,10,8,8,8,9,8,9,10,10,10,8,8,8,9,8,9,10,10,10,10,8,8,9,9,8,9,8,9,10,10,10,8,9,8,8,8,9,10,10,10,10,8,8,8,8,8,9,9,10,10,8,8,8,8,9,10,10,9,9,10,8,9,9,8,8,8,9,9,8,8,9,9,10,10,8,9,9,9,8,8,9,10,10,8,9,10,8,8,9,9,8,9,10,10,11,10,9,9,9,10,10,9,10,9,9,10,10,9,11,8,9,8,9,10,10,10,9,10,10,10,8,8,9,8,8,9,10,10,10,10,10,8,8,8,9,10,10,11,11,10,10,8,9,9,10,9,9,9,9,10,9,9,9,10,9,9,8,8,9,8,9,9,10,10,10,10,10,9,8,9,10,8,9,10,10,10,10,9,8,9,10,8,9,10,10,10,10,10,10,8,9,10,10,10,9,8,9,10,10,10,8,9,9,10,8,9,10,10,10,10,10,8,9,10,10,9,9,10,11,9,9,9,8,9,9,10,11,10,10,10,9,8,9,9,11,10,10,10,10,10,10,10,10,9,8,9,9,9,9,10,7,9,10,10,10,9,10,10,10,8,9,9,10,10,10,11,10,9,9,9,10,9,9,8,9,9,9,9,9,10,10,9,9,10,10,8,9,9,10,10,10,7,8,8,8,9,9,10,9,9,8,9,9,10,10,10,9,10,10,10,10,8,8,9,10,9,8,9,11,10,10,8,9,9,10,10,10,9,10,10,8,9,5,10,10,9,6,7,9,8,9,9,10,10,10,8,8,9,10,10,10,10,11,9,10,8,9,10,10,10,10,8,9,10,10,10,10,10,8,7,10,8};

int main() {
  // solve(1, 11);
  // cout << "{0";
  // for (int i = 1; i <= 5000; i++) {
  //   ans[i] = -1;
  //   for (int j = 1; j <= 11; j++) {
  //     if (dp[1][j][i]) {
  //       ans[i] = j;
  //       break;
  //     }
  //   }
  //   cout << "," << ans[i];
  // }
  // cout << "}";
  int T; scanf("%d", &T);
  while (T--) {
    int n;
    scanf("%d", &n);
    printf("%d\n", ans[n]);
  }
  return 0;
}